deploy-to-server:
  stage: deploy
  image: alpine:latest

  variables:
    SECURE_FILES_DOWNLOAD_PATH: ".secure_files"
    ENDPOINT_ID: "1"

  before_script:
    - echo "⏱️ Iniciando configuración previa..."
    - apk add --no-cache bash curl openssh jq git docker-cli rsync
    - curl -s https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer | bash
    - mkdir -p ~/.ssh
    - cp .secure_files/id_ed25519 ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - |
      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        export SERVER_HOST=$SERVER_HOST_PROD
        export SERVER_USER=$SERVER_USER_PROD
      else
        export SERVER_HOST=$SERVER_HOST
        export SERVER_USER=$SERVER_USER
      fi
    - |
      cat > ~/.ssh/config <<EOF
      Host gitlab.com
        IdentityFile ~/.ssh/id_ed25519
        StrictHostKeyChecking no

      Host server
        HostName $SERVER_HOST
        User $SERVER_USER
        IdentityFile ~/.ssh/id_ed25519
        StrictHostKeyChecking no
      EOF
    - echo "✅ Configuración previa completada"

  script:
    - |
      echo "🚀 Lanzando $CI_PROJECT_NAME en $CI_COMMIT_REF_NAME"

      if [ "$CI_COMMIT_REF_NAME" = "main" ]; then
        IMAGE_NAME="${CI_PROJECT_NAME}"
        STACK_NAME="${CI_PROJECT_NAME}"
        DEPLOY_DIR="/var/www/html/prod/${CI_PROJECT_NAME}"
        ENV_FILE=".env.prod"
      elif [ "$CI_COMMIT_REF_NAME" = "staging" ]; then
        IMAGE_NAME="${CI_PROJECT_NAME}-staging"
        STACK_NAME="${CI_PROJECT_NAME}-staging"
        DEPLOY_DIR="/var/www/html/staging/${CI_PROJECT_NAME}"
        ENV_FILE=".env.staging"
      else
        IMAGE_NAME="${CI_PROJECT_NAME}-dev"
        STACK_NAME="${CI_PROJECT_NAME}-dev"
        DEPLOY_DIR="/var/www/html/dev/${CI_PROJECT_NAME}"
        ENV_FILE=".env.dev"
      fi

      echo "📦 Imagen $IMAGE_NAME"
      echo "📁 Carpeta $DEPLOY_DIR"
      echo "📛 Stack $STACK_NAME"
      echo "📄 Archivo de entorno $ENV_FILE"

      ssh server "mkdir -p $DEPLOY_DIR"
      rsync -az --delete ./ server:$DEPLOY_DIR/
      echo "🏗️ Construyendo Docker en servidor..."

      ssh server "
        cd $DEPLOY_DIR && \
        if echo \"$CI_PROJECT_NAME\" | grep -qi 'front'; then
          echo '🟩 Proyecto frontend aplicando variables desde $ENV_FILE'; \
          set -a && . ./$ENV_FILE && set +a && \
          docker build --no-cache \
            \$(cat $ENV_FILE | grep -v '^#' | grep '^VITE_' | sed 's/^/--build-arg /') \
            -t ${IMAGE_NAME}:latest . ; \
        else
          echo '🟦 Proyecto backend construyendo sin variables desde archivo .env'; \
          docker build --no-cache -t ${IMAGE_NAME}:latest . ; \
        fi
      "

      echo "✅ Imagen construida $IMAGE_NAME"
      ssh server "rm -rf $DEPLOY_DIR"
      ssh server "docker image prune -f || echo '⚠️ Ya hay un prune en ejecución, se omite'"
      echo "✅ Limpieza completada"

      echo "🌐 Desplegando stack..."

      # Validar que las variables necesarias existen
      if [ -z "$SOLDEPLOY_HOST" ]; then
        echo "❌ SOLDEPLOY_HOST no está configurado"
        exit 1
      fi

      if [ -z "$STACK_NAME" ]; then
        echo "❌ STACK_NAME no está configurado"
        exit 1
      fi

      # Preparar payload con validación
      PAYLOAD=$(jq -n --arg projectName "$STACK_NAME" --arg endpointId "$ENDPOINT_ID" '{
        projectName: $projectName,
        endpointId: ($endpointId | tonumber)
      }')

      echo "📤 Enviando payload: $PAYLOAD"

      # Realizar la petición con mejor manejo de errores
      RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${SOLDEPLOY_HOST}stacks" \
        -H "Content-Type: application/json" \
        --data "$PAYLOAD")

      # Separar respuesta y código HTTP
      HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
      RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)

      echo "📣 Código HTTP: $HTTP_CODE"
      echo "📣 Respuesta: $RESPONSE_BODY"

      # Verificar el resultado
      if [ "$HTTP_CODE" != "201" ] && [ "$HTTP_CODE" != "200" ]; then
        echo "❌ Falló el despliegue (HTTP $HTTP_CODE)"
        echo "❌ Detalles: $RESPONSE_BODY"
        exit 1
      fi

      if echo "$RESPONSE_BODY" | grep -q '"error"'; then
        echo "❌ Error en el despliegue"
        echo "❌ Detalles: $RESPONSE_BODY"
        exit 1
      fi

      echo "✅ Stack $STACK_NAME desplegado exitosamente"

  only:
    - dev
    - staging
    - main
